// This file is automatically generated by Citron version 2.0.
//
// The parser class defined below conforms to the CitronParser protocol
// defined in CitronParser.swift. 
// 
// The authors of Citron disclaim copyright to the source code in this file.

// Parser class

class WoodworkingCalculatorGrammar: CitronParser {

    // Types

    typealias CitronSymbolNumber = UInt8
    typealias CitronStateNumber = UInt8
    typealias CitronRuleNumber = UInt8

    enum CitronTokenCode: CitronSymbolNumber {
      case Add                            =   1
      case Subtract                       =   2
      case Multiply                       =   3
      case Divide                         =   4
      case LeftParen                      =   5
      case RightParen                     =   6
      case Feet                           =   7
      case Inches                         =   8
      case Integer                        =   9
      case MixedNumber                    =  10
      case Real                           =  11
    }

    enum CitronNonTerminalCode: CitronSymbolNumber {
      case equation                       =  12
      case expression                     =  13
      case multiplicative                 =  14
      case atom                           =  15
      case quantity                       =  16
      case integer                        =  17
      case mixed_number                   =  18
      case real                           =  19
    }

    enum CitronSymbolCode : RawRepresentable, Equatable {
        case token(CitronTokenCode)
        case nonterminal(CitronNonTerminalCode)
        case endOfInput

        init(_ token: CitronTokenCode) { self = .token(token) }
        init(_ nonterminal: CitronNonTerminalCode) { self = .nonterminal(nonterminal) }
        init(rawValue: CitronSymbolNumber) {
            if (rawValue == 0) {
                self = .endOfInput
            } else if (rawValue < 12) {
                self = .token(CitronTokenCode(rawValue: rawValue)!)
            } else if (rawValue < 20) {
                self = .nonterminal(CitronNonTerminalCode(rawValue: rawValue)!)
            } else {
                fatalError()
            }
        }

        typealias RawValue = CitronSymbolNumber
        var rawValue: CitronSymbolNumber {
            switch (self) {
            case .token(let t): return t.rawValue
            case .nonterminal(let nt): return nt.rawValue
            case .endOfInput: return 0
            }
        }
    }

    typealias CitronToken = Token

    enum CitronSymbol {
        case yyBaseOfStack
        case yy0(CitronToken)
        case yy2(EvaluatableCalculation)
        case yy4(Int)
        case yy8(Double)
        case yy35(Rational)

        func typeErasedContent() -> Any {
            switch (self) {
            case .yyBaseOfStack: fatalError()
            case .yy0(let value): return value as Any
            case .yy2(let value): return value as Any
            case .yy4(let value): return value as Any
            case .yy8(let value): return value as Any
            case .yy35(let value): return value as Any
            }
        }
    }

    typealias CitronResult = EvaluatableCalculation

    // Counts

    let yyNumberOfSymbols: Int = 20
    let yyNumberOfStates: Int = 21

    // Action tables

    let yyLookaheadAction: [(CitronSymbolNumber, CitronParsingAction)] = [
/*   0 */  (12, .ACCEPT),   (13, .SH(11)), (14, .SH(14)), (15, .RD( 6)), (16, .RD( 7)),
/*   5 */  (17, .SH(13)), (18, .SH(17)), (19, .SH(12)), (13, .SH( 9)), (14, .SH(14)),
/*  10 */  (15, .RD( 6)), (16, .RD( 7)), (17, .SH(13)), (18, .SH(17)), (19, .SH(12)),
/*  15 */  (13, .SH(10)), (14, .SH(14)), (15, .RD( 6)), (16, .RD( 7)), (17, .SH(13)),
/*  20 */  (18, .SH(17)), (19, .SH(12)), (14, .SH(15)), (15, .RD( 6)), (16, .RD( 7)),
/*  25 */  (17, .SH(13)), (18, .SH(17)), (19, .SH(12)), (14, .SH(16)), (15, .RD( 6)),
/*  30 */  (16, .RD( 7)), (17, .SH(13)), (18, .SH(17)), (19, .SH(12)), ( 2, .SH( 7)),
/*  35 */  ( 7, .SR(18)), ( 8, .SR(23)), ( 5, .SH( 1)), (17, .SH(19)), (18, .SH(20)),
/*  40 */  (19, .SH(18)), ( 9, .SR(25)), (10, .SR(26)), (11, .SR(27)), (15, .RD( 5)),
/*  45 */  (16, .RD( 7)), (17, .SH(13)), (18, .SH(17)), (19, .SH(12)), (15, .RD( 4)),
/*  50 */  (16, .RD( 7)), (17, .SH(13)), (18, .SH(17)), (19, .SH(12)), ( 5, .SH( 2)),
/*  55 */  ( 9, .SR(25)), (10, .SR(26)), (11, .SR(27)), ( 9, .SR(25)), (10, .SR(26)),
/*  60 */  (11, .SR(27)), (16, .RD( 8)), (17, .SH(13)), (18, .SH(17)), (19, .SH(12)),
/*  65 */  ( 1, .SH( 4)), ( 2, .SH( 3)), ( 1, .SH( 4)), ( 2, .SH( 3)), ( 8, .SR(19)),
/*  70 */  ( 6, .SR( 9)), ( 8, .SR(15)), ( 6, .SR(10)), ( 0, .RD( 0)), ( 1, .SH( 4)),
/*  75 */  ( 2, .SH( 3)), ( 7, .SH( 8)), ( 8, .SR(21)), ( 3, .SH( 6)), ( 4, .SH( 5)),
/*  80 */  ( 8, .SR(13)), (20, .RD( 2)), ( 8, .SR(11)),
    ]

    let yyShiftUseDefault: Int = 83
    let yyShiftOffsetMin: Int = 0
    let yyShiftOffsetMax: Int = 75
    let yyShiftOffset: [Int] = [
        /*     0 */    32,   32,   32,   32,   32,   32,   32,   49,   46,   64,
        /*    10 */    66,   73,   28,   69,   75,   75,   75,   61,   63,   72,
        /*    20 */    74,
    ]

    let yyReduceUseDefault: Int = -13
    let yyReduceOffsetMin: Int =   -12
    let yyReduceOffsetMax: Int =   45
    let yyReduceOffset: [Int] = [
        /*     0 */   -12,   -5,    2,    8,   14,   29,   34,   45,   21,
    ]

    let yyDefaultAction: [CitronParsingAction] = [
  /*     0 */  .ERROR , .ERROR , .ERROR , .ERROR , .ERROR ,
  /*     5 */  .ERROR , .ERROR , .ERROR , .RD(17), .ERROR ,
  /*    10 */  .ERROR , .ERROR , .RD(24), .RD(22), .RD( 3),
  /*    15 */  .RD( 2), .RD( 1), .RD(20), .RD(16), .RD(14),
  /*    20 */  .RD(12),
    ]

    // Fallback

    let yyHasFallback: Bool = false
    let yyFallback: [CitronSymbolNumber] = []

    // Wildcard

    let yyWildcard: CitronSymbolNumber? = nil

    // Rules

    let yyRuleInfo: [(lhs: CitronSymbolNumber, nrhs: UInt)] = [
        (lhs: 12, nrhs: 1),
        (lhs: 13, nrhs: 3),
        (lhs: 13, nrhs: 3),
        (lhs: 13, nrhs: 1),
        (lhs: 14, nrhs: 3),
        (lhs: 14, nrhs: 3),
        (lhs: 14, nrhs: 1),
        (lhs: 15, nrhs: 1),
        (lhs: 15, nrhs: 2),
        (lhs: 15, nrhs: 3),
        (lhs: 15, nrhs: 4),
        (lhs: 16, nrhs: 4),
        (lhs: 16, nrhs: 3),
        (lhs: 16, nrhs: 4),
        (lhs: 16, nrhs: 3),
        (lhs: 16, nrhs: 4),
        (lhs: 16, nrhs: 3),
        (lhs: 16, nrhs: 2),
        (lhs: 16, nrhs: 2),
        (lhs: 16, nrhs: 2),
        (lhs: 16, nrhs: 1),
        (lhs: 16, nrhs: 2),
        (lhs: 16, nrhs: 1),
        (lhs: 16, nrhs: 2),
        (lhs: 16, nrhs: 1),
        (lhs: 17, nrhs: 1),
        (lhs: 18, nrhs: 1),
        (lhs: 19, nrhs: 1),
    ]

    // Stack

    var yyStack: [(stateOrRule: CitronStateOrRule , symbolCode: CitronSymbolNumber, symbol: CitronSymbol)]  = [
        (stateOrRule: .state(0), symbolCode: 0, symbol: .yyBaseOfStack)
    ]
    var maxStackSize: Int? = nil
    var maxAttainedStackSize: Int = 0

    // Tracing

    var isTracingEnabled: Bool = false
    var isTracingPrintsSymbolValues: Bool = false
    var isTracingPrintsTokenValues: Bool = false
    let yySymbolName: [String] = [
    /*  0 */ "$",
    /*  1 */ "Add",
    /*  2 */ "Subtract",
    /*  3 */ "Multiply",
    /*  4 */ "Divide",
    /*  5 */ "LeftParen",
    /*  6 */ "RightParen",
    /*  7 */ "Feet",
    /*  8 */ "Inches",
    /*  9 */ "Integer",
    /* 10 */ "MixedNumber",
    /* 11 */ "Real",
    /* 12 */ "equation",
    /* 13 */ "expression",
    /* 14 */ "multiplicative",
    /* 15 */ "atom",
    /* 16 */ "quantity",
    /* 17 */ "integer",
    /* 18 */ "mixed_number",
    /* 19 */ "real",
    ]
    let yyRuleText: [String] = [
        /*   0 */ "equation ::= expression(e)",
        /*   1 */ "expression ::= expression(left) Add multiplicative(right)",
        /*   2 */ "expression ::= expression(left) Subtract multiplicative(right)",
        /*   3 */ "expression ::= multiplicative(x)",
        /*   4 */ "multiplicative ::= multiplicative(left) Multiply atom(right)",
        /*   5 */ "multiplicative ::= multiplicative(left) Divide atom(right)",
        /*   6 */ "multiplicative ::= atom(x)",
        /*   7 */ "atom ::= quantity(x)",
        /*   8 */ "atom ::= Subtract quantity(x)",
        /*   9 */ "atom ::= LeftParen expression(x) RightParen",
        /*  10 */ "atom ::= Subtract LeftParen expression(x) RightParen",
        /*  11 */ "quantity ::= integer(f) Feet mixed_number(i) Inches",
        /*  12 */ "quantity ::= integer(f) Feet mixed_number(i)",
        /*  13 */ "quantity ::= integer(f) Feet integer(i) Inches",
        /*  14 */ "quantity ::= integer(f) Feet integer(i)",
        /*  15 */ "quantity ::= integer(f) Feet real(i) Inches",
        /*  16 */ "quantity ::= integer(f) Feet real(i)",
        /*  17 */ "quantity ::= integer(f) Feet",
        /*  18 */ "quantity ::= real(f) Feet",
        /*  19 */ "quantity ::= mixed_number(i) Inches",
        /*  20 */ "quantity ::= mixed_number(i)",
        /*  21 */ "quantity ::= integer(i) Inches",
        /*  22 */ "quantity ::= integer(i)",
        /*  23 */ "quantity ::= real(i) Inches",
        /*  24 */ "quantity ::= real(i)",
        /*  25 */ "integer ::= Integer(x)",
        /*  26 */ "mixed_number ::= MixedNumber(x)",
        /*  27 */ "real ::= Real(x)",
    ]

    // Function definitions

    func yyTokenToSymbol(_ token: CitronToken) -> CitronSymbol {
        return .yy0(token)
    }

    func yyInvokeCodeBlockForRule(ruleNumber: CitronRuleNumber) throws -> CitronSymbol {
        switch (ruleNumber) {
        case 0: /* equation ::= expression(e) */
            func codeBlockForRule00(e: EvaluatableCalculation) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 6)

    return e

#sourceLocation()
}
            if case .yy2(let e) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy2(try codeBlockForRule00(e: e))
            }
        case 1: /* expression ::= expression(left) Add multiplicative(right) */
            func codeBlockForRule01(left: EvaluatableCalculation, right: EvaluatableCalculation) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 11)

    return .add(left, right)

#sourceLocation()
}
            if case .yy2(let left) = yySymbolOnStack(distanceFromTop: 2),
               case .yy2(let right) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy2(try codeBlockForRule01(left: left, right: right))
            }
        case 2: /* expression ::= expression(left) Subtract multiplicative(right) */
            func codeBlockForRule02(left: EvaluatableCalculation, right: EvaluatableCalculation) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 14)

    return .subtract(left, right)

#sourceLocation()
}
            if case .yy2(let left) = yySymbolOnStack(distanceFromTop: 2),
               case .yy2(let right) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy2(try codeBlockForRule02(left: left, right: right))
            }
        case 3: /* expression ::= multiplicative(x) */
            func codeBlockForRule03(x: EvaluatableCalculation) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 17)

    return x

#sourceLocation()
}
            if case .yy2(let x) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy2(try codeBlockForRule03(x: x))
            }
        case 4: /* multiplicative ::= multiplicative(left) Multiply atom(right) */
            func codeBlockForRule04(left: EvaluatableCalculation, right: EvaluatableCalculation) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 22)

    return .multiply(left, right)

#sourceLocation()
}
            if case .yy2(let left) = yySymbolOnStack(distanceFromTop: 2),
               case .yy2(let right) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy2(try codeBlockForRule04(left: left, right: right))
            }
        case 5: /* multiplicative ::= multiplicative(left) Divide atom(right) */
            func codeBlockForRule05(left: EvaluatableCalculation, right: EvaluatableCalculation) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 25)

    return .divide(left, right)

#sourceLocation()
}
            if case .yy2(let left) = yySymbolOnStack(distanceFromTop: 2),
               case .yy2(let right) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy2(try codeBlockForRule05(left: left, right: right))
            }
        case 6: /* multiplicative ::= atom(x) */
            func codeBlockForRule06(x: EvaluatableCalculation) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 28)

    return x

#sourceLocation()
}
            if case .yy2(let x) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy2(try codeBlockForRule06(x: x))
            }
        case 7: /* atom ::= quantity(x) */
            func codeBlockForRule07(x: EvaluatableCalculation) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 37)

    return x

#sourceLocation()
}
            if case .yy2(let x) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy2(try codeBlockForRule07(x: x))
            }
        case 8: /* atom ::= Subtract quantity(x) */
            func codeBlockForRule08(x: EvaluatableCalculation) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 40)

    return .subtract(.rational(Rational(0, 1)), x)

#sourceLocation()
}
            if case .yy2(let x) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy2(try codeBlockForRule08(x: x))
            }
        case 9: /* atom ::= LeftParen expression(x) RightParen */
            func codeBlockForRule09(x: EvaluatableCalculation) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 43)

    return x

#sourceLocation()
}
            if case .yy2(let x) = yySymbolOnStack(distanceFromTop: 1) {
                return .yy2(try codeBlockForRule09(x: x))
            }
        case 10: /* atom ::= Subtract LeftParen expression(x) RightParen */
            func codeBlockForRule10(x: EvaluatableCalculation) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 46)

    return .subtract(.rational(Rational(0, 1)), x)

#sourceLocation()
}
            if case .yy2(let x) = yySymbolOnStack(distanceFromTop: 1) {
                return .yy2(try codeBlockForRule10(x: x))
            }
        case 11: /* quantity ::= integer(f) Feet mixed_number(i) Inches */
            func codeBlockForRule11(f: Int, i: Rational) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 51)

    return .rational(Rational((f * 12) * i.den + i.num, i.den))

#sourceLocation()
}
            if case .yy4(let f) = yySymbolOnStack(distanceFromTop: 3),
               case .yy35(let i) = yySymbolOnStack(distanceFromTop: 1) {
                return .yy2(try codeBlockForRule11(f: f, i: i))
            }
        case 12: /* quantity ::= integer(f) Feet mixed_number(i) */
            func codeBlockForRule12(f: Int, i: Rational) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 54)

    return .rational(Rational((f * 12) * i.den + i.num, i.den))

#sourceLocation()
}
            if case .yy4(let f) = yySymbolOnStack(distanceFromTop: 2),
               case .yy35(let i) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy2(try codeBlockForRule12(f: f, i: i))
            }
        case 13: /* quantity ::= integer(f) Feet integer(i) Inches */
            func codeBlockForRule13(f: Int, i: Int) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 57)

    return .rational(Rational(f * 12 + i, 1))

#sourceLocation()
}
            if case .yy4(let f) = yySymbolOnStack(distanceFromTop: 3),
               case .yy4(let i) = yySymbolOnStack(distanceFromTop: 1) {
                return .yy2(try codeBlockForRule13(f: f, i: i))
            }
        case 14: /* quantity ::= integer(f) Feet integer(i) */
            func codeBlockForRule14(f: Int, i: Int) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 60)

    return .rational(Rational(f * 12 + i, 1))

#sourceLocation()
}
            if case .yy4(let f) = yySymbolOnStack(distanceFromTop: 2),
               case .yy4(let i) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy2(try codeBlockForRule14(f: f, i: i))
            }
        case 15: /* quantity ::= integer(f) Feet real(i) Inches */
            func codeBlockForRule15(f: Int, i: Double) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 63)

    return .real(Double(f * 12) + i)

#sourceLocation()
}
            if case .yy4(let f) = yySymbolOnStack(distanceFromTop: 3),
               case .yy8(let i) = yySymbolOnStack(distanceFromTop: 1) {
                return .yy2(try codeBlockForRule15(f: f, i: i))
            }
        case 16: /* quantity ::= integer(f) Feet real(i) */
            func codeBlockForRule16(f: Int, i: Double) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 66)

    return .real(Double(f * 12) + i)

#sourceLocation()
}
            if case .yy4(let f) = yySymbolOnStack(distanceFromTop: 2),
               case .yy8(let i) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy2(try codeBlockForRule16(f: f, i: i))
            }
        case 17: /* quantity ::= integer(f) Feet */
            func codeBlockForRule17(f: Int) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 69)

    return .rational(Rational(f * 12, 1))

#sourceLocation()
}
            if case .yy4(let f) = yySymbolOnStack(distanceFromTop: 1) {
                return .yy2(try codeBlockForRule17(f: f))
            }
        case 18: /* quantity ::= real(f) Feet */
            func codeBlockForRule18(f: Double) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 72)

    return .real(f * 12)

#sourceLocation()
}
            if case .yy8(let f) = yySymbolOnStack(distanceFromTop: 1) {
                return .yy2(try codeBlockForRule18(f: f))
            }
        case 19: /* quantity ::= mixed_number(i) Inches */
            func codeBlockForRule19(i: Rational) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 75)

    return .rational(i)

#sourceLocation()
}
            if case .yy35(let i) = yySymbolOnStack(distanceFromTop: 1) {
                return .yy2(try codeBlockForRule19(i: i))
            }
        case 20: /* quantity ::= mixed_number(i) */
            func codeBlockForRule20(i: Rational) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 78)

    return .rational(i)

#sourceLocation()
}
            if case .yy35(let i) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy2(try codeBlockForRule20(i: i))
            }
        case 21: /* quantity ::= integer(i) Inches */
            func codeBlockForRule21(i: Int) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 81)

    return .rational(Rational(i, 1))

#sourceLocation()
}
            if case .yy4(let i) = yySymbolOnStack(distanceFromTop: 1) {
                return .yy2(try codeBlockForRule21(i: i))
            }
        case 22: /* quantity ::= integer(i) */
            func codeBlockForRule22(i: Int) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 84)

    return .rational(Rational(i, 1))

#sourceLocation()
}
            if case .yy4(let i) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy2(try codeBlockForRule22(i: i))
            }
        case 23: /* quantity ::= real(i) Inches */
            func codeBlockForRule23(i: Double) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 87)

    return .real(i)

#sourceLocation()
}
            if case .yy8(let i) = yySymbolOnStack(distanceFromTop: 1) {
                return .yy2(try codeBlockForRule23(i: i))
            }
        case 24: /* quantity ::= real(i) */
            func codeBlockForRule24(i: Double) throws -> EvaluatableCalculation {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 90)

    return .real(i)

#sourceLocation()
}
            if case .yy8(let i) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy2(try codeBlockForRule24(i: i))
            }
        case 25: /* integer ::= Integer(x) */
            func codeBlockForRule25(x: Token) throws -> Int {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 95)

    if case .integer(let int) = x {
        return int
    } else {
        preconditionFailure("lexer did not return Token.integer for the Integer token")
    }

#sourceLocation()
}
            if case .yy0(let x) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy4(try codeBlockForRule25(x: x))
            }
        case 26: /* mixed_number ::= MixedNumber(x) */
            func codeBlockForRule26(x: Token) throws -> Rational {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 104)

    if case .rational(let r) = x {
        return r
    } else {
        preconditionFailure("lexer did not return Token.rational for the MixedNumber token")
    }

#sourceLocation()
}
            if case .yy0(let x) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy35(try codeBlockForRule26(x: x))
            }
        case 27: /* real ::= Real(x) */
            func codeBlockForRule27(x: Token) throws -> Double {
#sourceLocation(file: "WoodworkingCalculator/Parser/WoodworkingCalculatorGrammar.y", line: 113)

    if case .real(let real) = x {
        return real
    } else {
        preconditionFailure("lexer did not return Token.real for the Real token")
    }

#sourceLocation()
}
            if case .yy0(let x) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy8(try codeBlockForRule27(x: x))
            }
        default:
            fatalError("Can't invoke code block for rule number \(ruleNumber) - no such rule")
        }
        fatalError("Can't resolve types correctly for invoking code block for rule number \(ruleNumber)")
    }

    private func yySymbolOnStack(distanceFromTop: Int) -> CitronSymbol {
        assert(yyStack.count > distanceFromTop)
        return yyStack[yyStack.count - 1 - distanceFromTop].symbol
    }

    func yyUnwrapResultFromSymbol(_ symbol: CitronSymbol) -> CitronResult {
        if case .yy2(let result) = symbol {
            return result
        } else {
            fatalError("Unexpected mismatch in result type")
        }
    }

    // Error capturing

    typealias CitronErrorCaptureDelegate = _WoodworkingCalculatorGrammarCitronErrorCaptureDelegate

    weak var errorCaptureDelegate: CitronErrorCaptureDelegate? = nil

    let yyErrorCaptureSymbolNumbersForState: [CitronStateNumber:[CitronSymbolNumber]] = [:]
    let yyCanErrorCapture: Bool = false
    let yyErrorCaptureDirectives: [CitronSymbolNumber:(endAfter:[[CitronTokenCode]],endBefore:[CitronTokenCode])] = [:]
    let yyErrorCaptureEndBeforeTokens: Set<CitronSymbolNumber> = []

    let yyErrorCaptureEndAfterSequenceEndingTokens: Set<CitronSymbolNumber> = []

    func yyShouldSaveErrorForCapturing(error: Error) -> Bool {
        fatalError("This parser was not generated with error capturing information")
    }

    func yyCaptureError(on symbolCode: CitronNonTerminalCode, error: Error, state: CitronErrorCaptureState) -> CitronSymbol? {
        fatalError("This parser was not generated with error capturing information")
    }

    func yySymbolContent(_ symbol: CitronSymbol) -> Any { return symbol.typeErasedContent() }

    let yyStartSymbolNumber: CitronSymbolNumber = 12
    let yyEndStateNumber: CitronStateNumber = 11

    var yyErrorCaptureSavedError: (error: Error, isLexerError: Bool)? = nil
    var yyErrorCaptureTokensSinceError: [(token: CitronToken, tokenCode: CitronTokenCode)] = []
    var yyErrorCaptureStackIndices: [Int] = []
    var yyErrorCaptureStartSymbolStackIndex: Int? = nil

    var numberOfCapturedErrors: Int = 0
}

protocol _WoodworkingCalculatorGrammarCitronErrorCaptureDelegate : AnyObject {
    func shouldSaveErrorForCapturing(error: Error) -> Bool
}

extension _WoodworkingCalculatorGrammarCitronErrorCaptureDelegate {
    func shouldSaveErrorForCapturing(error: Error) -> Bool {
        return true
    }
}

// Ability to use == to compare CitronSymbolCode with CitronTokenCode / CitronNonTerminalCode

extension WoodworkingCalculatorGrammar.CitronSymbolCode {
    static func == (a: WoodworkingCalculatorGrammar.CitronSymbolCode, b: WoodworkingCalculatorGrammar.CitronTokenCode) -> Bool {
        guard case let .token(code) = a else { return false }
        return (code == b)
    }
    static func == (a: WoodworkingCalculatorGrammar.CitronTokenCode, b: WoodworkingCalculatorGrammar.CitronSymbolCode) -> Bool {
        guard case let .token(code) = b else { return false }
        return (code == a)
    }
    static func == (a: WoodworkingCalculatorGrammar.CitronSymbolCode, b: WoodworkingCalculatorGrammar.CitronNonTerminalCode) -> Bool {
        guard case let .nonterminal(code) = a else { return false }
        return (code == b)
    }
    static func == (a: WoodworkingCalculatorGrammar.CitronNonTerminalCode, b: WoodworkingCalculatorGrammar.CitronSymbolCode) -> Bool {
        guard case let .nonterminal(code) = b else { return false }
        return (code == a)
    }
}

// Ability to use switch (symbolCode) { case .tokenCode: ...; case .nonterminalCode: ... }

extension WoodworkingCalculatorGrammar.CitronSymbolCode {
    static func ~= (pattern: WoodworkingCalculatorGrammar.CitronTokenCode, value: WoodworkingCalculatorGrammar.CitronSymbolCode) -> Bool {
        return (pattern == value)
    }
    static func ~= (pattern: WoodworkingCalculatorGrammar.CitronNonTerminalCode, value: WoodworkingCalculatorGrammar.CitronSymbolCode) -> Bool {
        return (pattern == value)
    }
}
